export PROJECT_ID=$(gcloud config get-value project)
export PROJECT_NUMBER=$(gcloud projects describe $PROJECT_ID --format='value(projectNumber)')

export ZONE=us-central1-b
export CLUSTER=gke-progression-cluster
export APP_NAME=myapp


gcloud services enable \
    cloudresourcemanager.googleapis.com \
    container.googleapis.com \
    sourcerepo.googleapis.com \
    cloudbuild.googleapis.com \
    containerregistry.googleapis.com \
    --async


git clone https://github.com/GoogleCloudPlatform/software-delivery-workshop.git gke-progression

cd gke-progression/labs/gke-progression
rm -rf ../../.git


cat k8s/deployments/dev/frontend-dev.yaml.tmpl


for template in $(find . -name '*.tmpl'); do envsubst '${PROJECT_ID} ${ZONE} ${CLUSTER} ${APP_NAME}' < ${template} > ${template%.*}; done


cat k8s/deployments/dev/frontend-dev.yam

git config --global user.email "YOUR_EMAIL_ADDRESS"
git config --global user.name "YOUR_USERNAME"


gcloud source repos create gke-progression
git init
git config credential.helper gcloud.sh
git remote add gcp https://source.developers.google.com/p/$PROJECT_ID/r/gke-progression
git branch -m main
git add . && git commit -m "initial commit"
git push gcp main


gcloud container clusters create ${CLUSTER} \
    --project=${PROJECT_ID} \
    --zone=${ZONE}
    
    
    gcloud projects add-iam-policy-binding ${PROJECT_ID} \
    --member=serviceAccount:${PROJECT_NUMBER}@cloudbuild.gserviceaccount.com \
    --role=roles/container.developer
    
    gcloud builds submit --tag gcr.io/$PROJECT_ID/$APP_NAME:1.0.0 src/
    
kubectl create ns production
kubectl apply -f k8s/deployments/prod -n production
kubectl apply -f k8s/deployments/canary -n production
kubectl apply -f k8s/services -n production

kubectl get pods -n production -l app=$APP_NAME -l role=frontend
kubectl get service $APP_NAME -n production
export PRODUCTION_IP=$(kubectl get -o jsonpath="{.status.loadBalancer.ingress[0].ip}"  --namespace=production services $APP_NAME)
curl http://$PRODUCTION_IP

export BRANCH_NAME=new-feature-1
#inside build/main-trigger.json make sure line number 69 and 70  must be there

  "branchName": "main",
  "invertRegex": true
  
  kubectl get ns ${BRANCH_NAME} || kubectl create ns ${BRANCH_NAME}
  kubectl apply --namespace ${BRANCH_NAME} --recursive -f k8s/deployments/dev
  kubectl apply --namespace ${BRANCH_NAME} --recursive -f k8s/services
  


gcloud beta builds triggers create cloud-source-repositories \
  --trigger-config build/main-trigger.json
  
  git checkout -b new-feature-1
  
  @app.route('/')
def hello_world():
    return 'Hello World v1.1'
    
    git add . && git commit -m "updated" && git push gcp new-feature-1
    
    kubectl get service $APP_NAME -n new-feature-1
    
    export BRANCH_IP=$(kubectl get -o jsonpath="{.status.loadBalancer.ingress[0].ip}"  --namespace=new-feature-1 services $APP_NAME)
    
    curl http://$BRANCH_IP
    
    
  
git checkout main
git merge new-feature-1
git push gcp main

while true; do curl -w "\n" http://$PRODUCTION_IP; sleep 1;  done


6. Automating deployments for git main branch
Before code is released to production, it's common to release code to a small subset of live traffic before migrating all traffic to the new code base.

In this section, you implement a trigger that is activated when code is committed to the main branch. The trigger deploys the canary deployment which receives 25% of all live traffic to the new revision.

Set up the trigger for the main branch:

gcloud beta builds triggers create cloud-source-repositories \
  --trigger-config build/main-trigger.json
To review the new trigger, go to the Cloud Build Triggers page in the Console.Go to Triggers
Merge the branch to the main line and push to the remote repository:

git checkout main
git merge new-feature-1
git push gcp main
To review the build in progress, go to the Cloud Build History page in the Console.Go to BuildsOnce the build has completed continue to the next step
Review multiple responses from the serverRun the following command and note that approximately 25% of the responses are showing the new response of Hello World v1.1

while true; do curl -w "\n" http://$PRODUCTION_IP; sleep 1;  done
When you're ready to continue press Ctrl+c to exit out of the loop.
    
    
